// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static Array whiteMasks, blackMasks;
    static int base;

    /** Initializes the Screen. */
    function void init() {
        var int m, i;
        let base = 16384;
        let color = true;
        
        // masks
        let m = 1;
        let whiteMasks = Array.new(16);
        let blackMasks = Array.new(16);        
        let i = 0;
        while (i < 16) {
            let blackMasks[i] = m;
            if (i < 15) {
                let whiteMasks[i] = -1 - m;
            }
            else {
                let whiteMasks[i] = 32767;
            }
            let m = m * 2;
            let i = i + 1;
        }
	return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i < 8192) {
            let base[i] = 0;
            let i = i + 1;
        }
        return ;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
      let color = b;
      return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int c, int r) {
        var int bit, addr;
        let bit = c & 15;
        let addr = r * 32 + (c / 16);
        if (color) {
            let base[addr] = base[addr] | blackMasks[bit];
        }
        else {
            let base[addr] = base[addr] & whiteMasks[bit];
        }
      return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int c1, int r1, int c2, int r2) {
       var int a, b, i, adyMinusbdx, absdx, absdy;

        // horizontal line
        if (r1 = r2) {
            if (c1 < c2) {
                let a = c1;
                let b = c2;
            }
            else {
                let a = c2;
                let b = c1;
            }
            let i = a;
            while (~(i > b)) {
                do Screen.drawPixel(i, r1);
                let i = i + 1;
            }
            return ;
        }

        // vertical line
        if (c1 = c2) {
            if (r1 < r2) {
                let a = r1;
                let b = r2;
            }
            else {
                let a = r2;
                let b = r1;
            }
            let i = a;
            while (~(i > b)) {
                do Screen.drawPixel(c1, i);
                let i = i + 1;
            }
            return ;
        }

        // dx != 0, dy != 0
        let absdx = Math.abs(r2 - r1);
        let absdy = Math.abs(c2 - c1);
        let a = 0;
        let b = 0;
        let adyMinusbdx = 0;
        while ((~(Math.abs(a) > absdx)) & (~(Math.abs(b) > absdy))) {
            do Screen.drawPixel(c1 + b, r1 + a);
            if (adyMinusbdx > 0) {
                if (c2 > c1) {
                    let b = b + 1;
                }
                else {
                    let b = b - 1;
                }
                let adyMinusbdx = adyMinusbdx - absdx;
            }
            else {
                if (r2 > r1) {
                    let a = a + 1;
                }
                else {
                    let a = a - 1;
                }
                let adyMinusbdx = adyMinusbdx + absdy;
            }
        }
        return ;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int c1, int r1, int c2, int r2) {
        var int i, j;
        let i = r1;
        while (~(i > r2)) {
            do Screen.drawLine(c1, i, c2, i);
            let i = i + 1;
        }
        return ;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int c, int r, int radius) {
        var int i, dc;
        let i = -radius;
        while (~(i > radius)) {
            let dc = Math.sqrt(radius * radius - (i * i));
            do Screen.drawLine(c - dc, r + i, c + dc, r + i);
            let i = i + 1;
        }
        return ;
    }
}
