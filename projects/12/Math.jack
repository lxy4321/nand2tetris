// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */

class Math {

    static Array pow2, powY;
    /** Initializes the library. */
    function void init() {
        var int i;
        let pow2 = Array.new(16);
        let pow2[0] = 1;
        let i = 1;
        while (i < 16) {
            let pow2[i] = pow2[i - 1] + pow2[i - 1];
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x > 0) {
            return x;
        }
        if (x < 0) {
            return -x;
        }
        return 0;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int ans, i, mask;
        let ans = 0;
        let i = 0;
        let mask = 1;
        while (i < 16) {
            if (y & mask) {
                let ans = ans + x;
            }
            let mask = mask + mask;
            let x = x + x;
            let i = i + 1;
        }
        return ans;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the division operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {

        var int i, ax, ay, k, ans, p;
        var Array powY;
        
        let ax = Math.abs(x);
        let ay = Math.abs(y);
        // special optim for pong
        if ((y = 16) & (x < 512)) {
            let i = 5;
        }
        else {
            let i = 15;
        }
        let ans = 0;
        while (~(i < 0)) {
            let p = pow2[i];
            let k = p * ay;
            if ((k > 0) & ~(k > ax)) {
                let ax = ax - k;
                let ans = ans + p;
            }            
            let i = i - 1;
        }
        
        // sign
        if (x < 0) {
            let ans = -ans;
        }
        if (y < 0) {
            let ans = -ans;
        }
        return ans;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int lo, hi, mid, ans;
        if (x < 0) {
            return -666;
        }
        let lo = 0;
        let hi = 181;
        while (~(lo > hi)) {
            let mid = (lo + hi) / 2;
            if (~(mid * mid > x)) {
                let ans = mid;
                let lo = mid + 1;
            }
            else {
                let hi = mid - 1;
            }
        }
        return ans;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > 0 & b < 0) {
            return a;
        }
        if (a < 0 & b > 0) {
            return b;
        }
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a > 0 & b < 0) {
            return b;
        }
        if (a < 0 & b > 0) {
            return a;
        }    
        if (a < b) {
            return a;
        }
        return b;
    }
}

