// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array memory;
    static Array heap;
    static Array freeList;

    /** Initializes the class. */
    function void init() {
      let memory = 0;
      let freeList = 2048;
      let heap = 2048;
      let freeList[0] = null;
      let freeList[1] = 14335;
      return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
      return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
      let memory[address] = value;
      return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
      var int freeSpace;
      var Array newList;
      let freeList = heap;
      while ( freeList[1] < (size+2)) {
	let freeList = freeList[0];
        if (freeList = null) {
	  return -1;
	}
      }
          let freeSpace = freeList[1] - (size + 2);
          let newList = freeList + 2 + freeSpace;
	  let newList[1] = size;
	  let freeList[1] = freeSpace;
	  return newList+2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
      var Array end;
      let end = heap;
      while (~(end[0] = null)) {
        let end = end[0];
      }
      let end[0] = o-2;
      let end = end[0];
      let end[1] = Memory.peek(o-1);
      let end[0] = null;
      return;
    }    
}
